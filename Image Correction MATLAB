function [finalImage] =undistort(Image,cImage)

%% Read image and show red stars
% Image = imread(['test6.jpg'],'jpg');
% cImage = imread(['test1.jpg'],'jpg');
newImage = Image(:, :, 2);
imshow(newImage, []);
finalImage = cImage*0;
% binaryImage = newImage < 150; % Used if we want to look for black pixels
binaryImage = imbinarize(newImage);
skeletonImage = bwmorph(binaryImage, 'skel', inf);
branchImage = bwmorph(skeletonImage, 'branchpoints');
[branchRows, branchColumns] = find(branchImage);
[aa, ss] = find(newImage);
cc =[aa,ss];
%% Remove extra red stars
Cor = [branchColumns, branchRows];
DS = [1 1];
[C,ia] = uniquetol(Cor, 25, 'ByRows', true, ...
 'OutputAllIndices', true, 'DataScale', DS);
for k = 1:length(ia)
 aveCor(k,:) = mean(Cor(ia{k},:),1);
end
%% Plot
hold all;
% imshow(newImage)
% plot(aveCor(:,1), aveCor(:,2), 'r*', 'MarkerSize', 4)
 c= 8;
%  plot(aveCor(c,1), aveCor(c,2), 'r*', 'MarkerSize', 4)
%% Finding Point Mapped out point closest to orgin %%
s = size(aveCor);
orginCor = [0 0];
[d, iw] = pdist2(aveCor, orginCor,'euclidean','Smallest',2);% d returns min value, i returns indice
%% Important Assumptions %%
% Number of rows and columns known of calibration photo
% Photo grid is relatively in line with horizontal and parralle axises
%% Gathering information about image grid %%
g = pdist2(aveCor(iw(1),:), aveCor(iw(2),:))-1;
limit = g - g/3;
cols = pdist2(aveCor(iw(1),1), aveCor(:,1));
rows = pdist2(aveCor(iw(1),2), aveCor(:,2));
num_rows = sum(rows < limit);
num_cols = sum(cols < limit);
num_squr = (num_cols - 1)*(num_rows - 1);
arrCor =[aveCor(iw(1),:)];
[q, w] = sort(rows);
[e, r] = sort(cols);
%% Creating grid to map out vertices, and grid to map out vertices and %%
%% points corrected %%
Gridpic =zeros(num_cols,num_rows); %% possibly switched rows and cols
%% Identifying image vertices %%

w = [w;w] ;
r = [r;r];
d = 1;
q = 1;
i = num_rows;
while i <= s(1)
w(2,q:i) = d;
i = i + num_rows;
q = q + num_rows;
d = d + 1;
end

d = 1;
q = 1;
i = num_cols;
while i <= s(1)
r(2,q:i) = d;
i = i + num_cols;
q = q + num_cols;
d = d + 1;
end

newW = sortrows(w.').';
newR = sortrows(r.').';
i = 1;
while i <= s(1)
Gridpic(newW(2,i),newR(2,i)) = newW(1,i);
correctedGridpic = Gridpic;

i = i+1;
end
%%  Beginning of Grid Correction Code
xx = 1;
yy = 1;
ff = 1;
qwc = [aveCor(1,1):g:(aveCor(1,1)+g * num_rows)];
qwr = [aveCor(1,2):g:(aveCor(1,2)+g * num_cols)];
while xx < num_cols
    while yy < num_rows%%switched ?
       
    p1 = Gridpic(xx,yy);
    p2 = Gridpic(xx,(yy+1));
    p3 = Gridpic((xx+1),(yy+1));%% switched ?
    p4 = Gridpic((xx+1),yy);
xv = (round([aveCor(p1,1) aveCor(p2,1) aveCor(p3,1) aveCor(p4,1),aveCor(p1,1)]'));
yv = (round([aveCor(p1,2) aveCor(p2,2) aveCor(p3,2) aveCor(p4,2),aveCor(p1,2)]'));
xq = [cc(:,2)];%%switched 
yq = [cc(:,1)];

[in ones] =inpolygon(xq,yq,xv,yv);
xq_c=[];
yq_c=[];
xq_c = xq(in);
yq_c = yq(in);
xp = xq(in);
yp = yq(in);
%% Orginal Coordinates %%
Coordinates_o = [xv'       % X cordinates
                 yv'];      % Y cordinates
Coordinates_o=Coordinates_o;
%% Target Coordinates %%
Coordinates_f = [qwc(yy)  (qwc(yy+1))   (qwc(yy+1))  (qwc(yy))    (qwc(yy))
                 qwr(xx)  (qwr(xx))     (qwr(xx+1))  (qwr(xx+1))  (qwr(xx))];
X1 = Coordinates_o(1,1) ; X2 = Coordinates_o(1,2); X3 = Coordinates_o(1,3); X4 = Coordinates_o(1,4);
Y1 = Coordinates_o(2,1) ; Y2 = Coordinates_o(2,2); Y3 = Coordinates_o(2,3); Y4 = Coordinates_o(2,4);
%% Displacements %%
u1 = Coordinates_f(1,1)-Coordinates_o(1,1); u2 = Coordinates_f(1,2)-Coordinates_o(1,2); u3 = Coordinates_f(1,3)-Coordinates_o(1,3); u4 = Coordinates_f(1,4)-Coordinates_o(1,4);
v1 = Coordinates_f(2,1)-Coordinates_o(2,1); v2 = Coordinates_f(2,2)-Coordinates_o(2,2); v3 = Coordinates_f(2,3)-Coordinates_o(2,3); v4 = Coordinates_f(2,4)-Coordinates_o(2,4);
i = 1;
qq= size(xq_c);
while i <= qq(1)
%% Point of Interest %%
point = [xq_c(i)
         yq_c(i)];
%% Assigned Values %%
x = point(1,1);
y = point(2,1);

r = - (X1*Y2 - X2*Y1 + X1*Y4 - X2*Y3 + X3*Y2 - X4*Y1 + X3*Y4 - X4*Y3 - 2*X1*y + 2*Y1*x + 2*X2*y - 2*Y2*x - 2*X3*y + 2*Y3*x + 2*X4*y - 2*Y4*x)/(X1*Y3 - X3*Y1 - X1*Y4 - X2*Y3 + X3*Y2 + X4*Y1 + X2*Y4 - X4*Y2) - (X2*Y1 - X1*Y2 - X3*Y4 + X4*Y3 + X1*y - Y1*x - X2*y + Y2*x + X3*y - Y3*x - X4*y + Y4*x + (X1^2*Y3^2 - 2*X1^2*Y3*y + X1^2*y^2 - 2*X1*X2*Y3*Y4 + 2*X1*X2*Y3*y + 2*X1*X2*Y4*y - 2*X1*X2*y^2 - 2*X1*X3*Y1*Y3 + 2*X1*X3*Y1*y + 4*X1*X3*Y2*Y4 - 4*X1*X3*Y2*y + 2*X1*X3*Y3*y - 4*X1*X3*Y4*y + 2*X1*X3*y^2 - 2*X1*X4*Y2*Y3 + 2*X1*X4*Y2*y + 2*X1*X4*Y3*y - 2*X1*X4*y^2 + 2*X1*Y1*Y3*x - 2*X1*Y1*x*y + 2*X1*Y2*Y3*x - 4*X1*Y2*Y4*x + 2*X1*Y2*x*y - 2*X1*Y3^2*x + 2*X1*Y3*Y4*x - 2*X1*Y3*x*y + 2*X1*Y4*x*y + X2^2*Y4^2 - 2*X2^2*Y4*y + X2^2*y^2 - 2*X2*X3*Y1*Y4 + 2*X2*X3*Y1*y + 2*X2*X3*Y4*y - 2*X2*X3*y^2 + 4*X2*X4*Y1*Y3 - 4*X2*X4*Y1*y - 2*X2*X4*Y2*Y4 + 2*X2*X4*Y2*y - 4*X2*X4*Y3*y + 2*X2*X4*Y4*y + 2*X2*X4*y^2 - 4*X2*Y1*Y3*x + 2*X2*Y1*Y4*x + 2*X2*Y1*x*y + 2*X2*Y2*Y4*x - 2*X2*Y2*x*y + 2*X2*Y3*Y4*x + 2*X2*Y3*x*y - 2*X2*Y4^2*x - 2*X2*Y4*x*y + X3^2*Y1^2 - 2*X3^2*Y1*y + X3^2*y^2 - 2*X3*X4*Y1*Y2 + 2*X3*X4*Y1*y + 2*X3*X4*Y2*y - 2*X3*X4*y^2 - 2*X3*Y1^2*x + 2*X3*Y1*Y2*x + 2*X3*Y1*Y3*x + 2*X3*Y1*Y4*x - 2*X3*Y1*x*y - 4*X3*Y2*Y4*x + 2*X3*Y2*x*y - 2*X3*Y3*x*y + 2*X3*Y4*x*y + X4^2*Y2^2 - 2*X4^2*Y2*y + X4^2*y^2 + 2*X4*Y1*Y2*x - 4*X4*Y1*Y3*x + 2*X4*Y1*x*y - 2*X4*Y2^2*x + 2*X4*Y2*Y3*x + 2*X4*Y2*Y4*x - 2*X4*Y2*x*y + 2*X4*Y3*x*y - 2*X4*Y4*x*y + Y1^2*x^2 - 2*Y1*Y2*x^2 + 2*Y1*Y3*x^2 - 2*Y1*Y4*x^2 + Y2^2*x^2 - 2*Y2*Y3*x^2 + 2*Y2*Y4*x^2 + Y3^2*x^2 - 2*Y3*Y4*x^2 + Y4^2*x^2)^(1/2))/(X1*Y3 - X3*Y1 - X1*Y4 - X2*Y3 + X3*Y2 + X4*Y1 + X2*Y4 - X4*Y2);
r(isnan(r))=0;
s = -(X2*Y1 - X1*Y2 - X3*Y4 + X4*Y3 + X1*y - Y1*x - X2*y + Y2*x + X3*y - Y3*x - X4*y + Y4*x + (X1^2*Y3^2 - 2*X1^2*Y3*y + X1^2*y^2 - 2*X1*X2*Y3*Y4 + 2*X1*X2*Y3*y + 2*X1*X2*Y4*y - 2*X1*X2*y^2 - 2*X1*X3*Y1*Y3 + 2*X1*X3*Y1*y + 4*X1*X3*Y2*Y4 - 4*X1*X3*Y2*y + 2*X1*X3*Y3*y - 4*X1*X3*Y4*y + 2*X1*X3*y^2 - 2*X1*X4*Y2*Y3 + 2*X1*X4*Y2*y + 2*X1*X4*Y3*y - 2*X1*X4*y^2 + 2*X1*Y1*Y3*x - 2*X1*Y1*x*y + 2*X1*Y2*Y3*x - 4*X1*Y2*Y4*x + 2*X1*Y2*x*y - 2*X1*Y3^2*x + 2*X1*Y3*Y4*x - 2*X1*Y3*x*y + 2*X1*Y4*x*y + X2^2*Y4^2 - 2*X2^2*Y4*y + X2^2*y^2 - 2*X2*X3*Y1*Y4 + 2*X2*X3*Y1*y + 2*X2*X3*Y4*y - 2*X2*X3*y^2 + 4*X2*X4*Y1*Y3 - 4*X2*X4*Y1*y - 2*X2*X4*Y2*Y4 + 2*X2*X4*Y2*y - 4*X2*X4*Y3*y + 2*X2*X4*Y4*y + 2*X2*X4*y^2 - 4*X2*Y1*Y3*x + 2*X2*Y1*Y4*x + 2*X2*Y1*x*y + 2*X2*Y2*Y4*x - 2*X2*Y2*x*y + 2*X2*Y3*Y4*x + 2*X2*Y3*x*y - 2*X2*Y4^2*x - 2*X2*Y4*x*y + X3^2*Y1^2 - 2*X3^2*Y1*y + X3^2*y^2 - 2*X3*X4*Y1*Y2 + 2*X3*X4*Y1*y + 2*X3*X4*Y2*y - 2*X3*X4*y^2 - 2*X3*Y1^2*x + 2*X3*Y1*Y2*x + 2*X3*Y1*Y3*x + 2*X3*Y1*Y4*x - 2*X3*Y1*x*y - 4*X3*Y2*Y4*x + 2*X3*Y2*x*y - 2*X3*Y3*x*y + 2*X3*Y4*x*y + X4^2*Y2^2 - 2*X4^2*Y2*y + X4^2*y^2 + 2*X4*Y1*Y2*x - 4*X4*Y1*Y3*x + 2*X4*Y1*x*y - 2*X4*Y2^2*x + 2*X4*Y2*Y3*x + 2*X4*Y2*Y4*x - 2*X4*Y2*x*y + 2*X4*Y3*x*y - 2*X4*Y4*x*y + Y1^2*x^2 - 2*Y1*Y2*x^2 + 2*Y1*Y3*x^2 - 2*Y1*Y4*x^2 + Y2^2*x^2 - 2*Y2*Y3*x^2 + 2*Y2*Y4*x^2 + Y3^2*x^2 - 2*Y3*Y4*x^2 + Y4^2*x^2)^(1/2))/(X1*Y2 - X2*Y1 - X1*Y3 + X3*Y1 + X2*Y4 - X4*Y2 - X3*Y4 + X4*Y3);
s(isnan(s))=0;
%% Displacements (X,Y) to Instantaneous Displacements (R,S) %%
u = ((1-r)*(1-s)*u1 + (1+r)*(1-s)*u2 + (1+r)*(1+s)*u3 +(1-r)*(1+s)*u4)/4;
v = ((1-r)*(1-s)*v1 + (1+r)*(1-s)*v2 + (1+r)*(1+s)*v3 +(1-r)*(1+s)*v4)/4;
%% New Point %%
 new_point = [(point(1,1)+u)
              (point(2,1)+v)];
xq_c(i) =round(xq_c(i) +u) ;
yq_c(i) =round(yq_c(i) +v);
i = i+1;
end
%% Point Analysis Figure %%
% figure
% plot(Coordinates_o(1,:),Coordinates_o(2,:))
% hold on
% plot(Coordinates_f(1,:),Coordinates_f(2,:))
% plot(point(1,1),point(2,1),'O')
% plot(new_point(1,1),new_point(2,1),'O')  
% legend
%% Corrected Figure %%
% figure 
% plot(xv,yv)
% axis equal
% hold on 
% plot(xq(~in), yq(~in),'bo')
% plot(xq_c,yq_c,'r+')
gg = size(finalImage);
finalImage(yq_c,xq_c,:) = cImage(yp,xp,:); %% switched row and cols

yy = yy+1

    end
    yy =1
    xx = xx+1
end
imshow(finalImage)
end



